// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//------------------- Model ------------------------

model Stocks {
  refArt                     String         @id
  marque                     String
  modele                     String
  prix                       Float
  quantiteStock              Int
  Alimentation               Alimentation[]
  capaciteToner              Int?
  compatibiliteToner         String?
  dateExpirationToner        DateTime?      @default(now())
  couleurToner               Couleur?
  capaciteFlashDvdCdRamHDD   Int?
  typeDisqueStoquage         TypeDisque?
  typeConnexionClavierSouris TypeConnexion?
  dispositionToucheClavier   Disposition?
  nombreBouttonSouris        Int?
  memoireCarteGraphiqueRam   Int?
  IntefaceCarteGraphique     String?
  frequenceCarteGraphiqueRam Int?
  typeRam                    String?
  interFaceHDD               InterfaceHDD?
  vitesseHDD                 Int?
  tailleHDD                  TailleDisque?
  TypeHDD                    TypeHDD?
  autre                      String?
}

enum CategorieAccessoire {
  Toner
  DisqueStoquage
  Clavier
  Souris
  FlashDisque
  CarteGraphique
  Ram
  DisqueDur
  CartoucheEncre
  Autres
}

enum InterfaceHDD {
  SATA
  USB
  PCIe
  IDE
}

enum TypeHDD {
  HDD
  SSD
  SSHD
}

enum TailleDisque {
  TWO_POINT_FIVE   @map("2.5")
  THREE_POINT_FIVE @map("3.5")
  M2
}

enum Disposition {
  AZERTY
  QWERTY
}

enum TypeConnexion {
  USB
  WIFI
  BLUETOOTH
}

enum TypeDisque {
  CD
  DVD
}

enum Couleur {
  noir
  couleur
}

model Societe {
  idSociete       Int            @id @default(autoincrement())
  raisonSociale   String
  adresse         String
  responsable     String
  email           String
  numtel          String
  secteurActivite String
  typeSociete     TypeSociete    @default(fournisseur)
  Materiel        Materiel[]
  Alimentation    Alimentation[]
  Logiciel        Logiciel[]
}

model Licence {
  idLicence      Int            @id @default(autoincrement())
  dateActivation DateTime       @default(now())
  dateExpiration DateTime       @default(now())
  prixLicence    Float
  Installation   Installation[]
  Logiciel       Logiciel?      @relation(fields: [idLogiciel], references: [idLogiciel])
  idLogiciel     Int?
}

model Logiciel {
  idLogiciel      Int          @id @default(autoincrement())
  libele          String
  version         String
  editeur         String
  dateAcquisition DateTime     @default(now())
  typeLogiciel    TypeLogiciel
  Societe         Societe?     @relation(fields: [idSociete], references: [idSociete])
  idSociete       Int?
  Licence         Licence[]
}

enum TypeLogiciel {
  Bureautique
  Technique
}

model Installation {
  idInstallation   Int       @id @default(autoincrement())
  numeroSerie      String?
  idLicence        Int?
  dateInstallation DateTime  @default(now())
  Materiel         Materiel? @relation(fields: [numeroSerie], references: [numeroSerie])
  Licence          Licence?  @relation(fields: [idLicence], references: [idLicence])

}

model Alimentation {
  idAlimentation   Int      @id @default(autoincrement())
  idSociete        Int
  refArt           String
  dateAlimentation DateTime @default(now())
  quantiteAlimente Int
  Societe          Societe  @relation(fields: [idSociete], references: [idSociete])
  Stocks           Stocks   @relation(fields: [refArt], references: [refArt])

  // @@unique([idSociete, refArt])
}

model Affectation {
  idAffectation Int @id @default(autoincrement())
  dateAttribution DateTime  @default(now())
  dateRetour      DateTime?
  motifRetour     String?
  etatAffectation String?
  Materiel                 Materiel?    @relation(fields: [materielNumeroSerie], references: [numeroSerie])
  materielNumeroSerie      String?
  Utilisateur              Utilisateur? @relation(fields: [utilisateurIdUtilisateur], references: [idUtilisateur])
  utilisateurIdUtilisateur Int?
}

model Emprunt {
  idEmprunt Int @id @default(autoincrement())
  dateEmprunt        DateTime  @default(now())
  dateRestitution    DateTime?
  refProjet          String
  etatMatRestitution String?
  etatEmprunt        String?
  Materiel                 Materiel?    @relation(fields: [materielNumeroSerie], references: [numeroSerie])
  materielNumeroSerie      String?
  Utilisateur              Utilisateur? @relation(fields: [utilisateurIdUtilisateur], references: [idUtilisateur])
  utilisateurIdUtilisateur Int?
}

model Departement {
  idDepartement String       @id
  nom           String
  Specialite    Specialite[]
}

model Materiel {
  numeroSerie                   String                 @id
  categorie                     Categorie              @default(UniteCentrale)
  marque                        String
  modele                        String
  prix                          Float
  garantie                      String
  etatMateriel                  EtatMateriel           @default(nouveau)
  dateAcquisition               DateTime               @default(now())
  idSociete                     Int
  nombrePortSwitch              Int?
  debitSwitch                   Int?
  technologieSwitch             String?
  processeurPC                  String?
  memoireCache                  String?
  ram                           String?
  disque                        String?
  carteGraphique                String?
  nombreDisque                  String?
  tailleEcran                   Float?
  etatBatteriePcPortable        String?
  vitesseImpression             String?
  connexionWLU                  ConnexionWLU?
  technologieOnduleur           TechnologieOnduleur?
  fonctionSupplementaireScanImp String?
  vitesseScanner                String?
  typeScanner                   TypeScanner?
  resolutionScanImpVideoP       String?
  technologieImpression         TechnologieImpression?
  formatScanImp                 String?
  poidsOnduleur                 String?
  autonomieOnduleur             String?
  capaciteChargeOnduleur        String?
  entreeHDMI_VideoProjecteur    Boolean?
  entreeVGA_VideoProjecteur     Boolean?
  entreeUSB_VideoProjecteur     Boolean?
  entreeLAN_VideoProjecteur     Boolean?
  Affectation                   Affectation[]
  Emprunt                       Emprunt[]
  Societe                       Societe?               @relation(fields: [idSociete], references: [idSociete], onDelete: Cascade)
  Installation                  Installation[]
}

model Specialite {
  idSpecialite  String        @id
  nom           String
  Utilisateur   Utilisateur[]
  Departement   Departement?  @relation(fields: [idDepartement], references: [idDepartement], onDelete: Cascade)
  idDepartement String?
}

model Utilisateur {
  idUtilisateur   Int             @id
  password        String
  fullName        String
  email           String
  createdAt       DateTime?       @default(now())
  lastLogin       DateTime?
  roleUtilisateur RoleUtilisateur @default(EMPLOYE)
  etatUtilisateur EtatUtilisateur @default(actif)
  telFix          String?
  telMobile       String?
  Affectation     Affectation[]
  Emprunt         Emprunt[]
  Specialite      Specialite?     @relation(fields: [idSpecialite], references: [idSpecialite], onDelete: Cascade)
  idSpecialite    String?
}

//------ ENUM--------
enum Categorie {
  UniteCentrale
  Ecran
  PcPortable
  Imprimante
  Scanner
  Onduleur
  VideoProjecteur
  Serveur
  Switch
}

enum TypeSociete {
  fournisseur
  prestataireService
}

enum ConnexionWLU {
  WIFI
  LAN
  USB
}

enum EtatMateriel {
  nouveau
  fonctionnel
  enPanne
  rebut
}

enum TypeScanner {
  Aplat
  ChargeAutomatique
}

enum TechnologieImpression {
  inkTank
  ecoTank
  Laser
  JetEncre
}

enum TechnologieOnduleur {
  off_line
  on_line
  in_line
}

enum EtatUtilisateur {
  actif
  inactif
  suspendu
}

enum RoleUtilisateur {
  DIRECTEUR
  ADMINISTRATEUR
  TECHNICIEN
  EMPLOYE
  RMQ
}

// enum RefProjet {
//   TERA
//   TERG
//   TERX
//   TERY
//   TEPA
//   TEPG
//   TEPX
//   TEPY
// }
